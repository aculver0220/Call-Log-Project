use 5.010;

use Mojo::Base -strict;

use Mojo::ByteStream 'b';
use Mojo::Collection;
use Mojo::CSV;
use Mojo::JSON 'j';
use Mojo::Util 'dumper';
use Mojo::Util qw(dumper shal_sum);

use List::MoreUtils qw(first_index);

use Time::Piece;

# The "contract"
my $data = Mojo::CSV->new->slurp($ARGV[0]);

my $tsv = TSV($data);
my $json = JSON($tsv);

sub TSV {
  my $data = shift;
  my ($SEED, $COUNTER) = ($$ . time . rand, int rand 0xffffff);
  my $last = [undef, undef];

  $data->tap(sub{splice(@$_,0,6); splice(@$_,-2); $_})->each(sub {
    $_->[0] = Time::Piece->strptime($_->[0], '%m/%d/%Y %I:%M:%S %p') if $_->[0];
    my = ($call_time, $caller_id, undef, $dest, $status, $ringing, $talking, $totals, $cost, $reason, $play) = @$_;
    my $id = $call_time ? new_id() : $last->[0]->[0];
    $_ = [$id, @$_];
    #$call_time = Time::Piece->strptime($call_time, '%m/%d/%Y %I:%M:%S %p') if $call_time;
    $_->[6] = ($call_time || $last->[0]->[7]) + hms2s($ringing);
    $_->[7] = $_->[6] + hms2s($talking);
    $last = [$_, $last->[0]];
    $last->[0]->[1] = $last->[1]->[7] unless $last->[0]->[1];
    $_ = join "\t", map { ref $_ ? $_->cdate : $_ } @$_;
  });
  return $data;
}

sub JSON {
  my $data = shift;
  my $R;
  my @r;

  $data->each(sub {
    chomp;
    my ($id, $date, $from, $to, undef, $length) = split /\t/;
    my ($r) = ("$from$to" =~ /\((\d{4})\)/);
    next unless $r =~ /^2/;
    my ($index) = ($r =~ /(\d)$/);
    $date = Time::Piece->strptime($date, '%c');
    push @{$R->{$r}->{$date->ymd}}, {x => $date->cdate, y => $index};
    push @{$R->{$r}->{$date->ymd}}, {x => ($date + _hms($length))->cdate, y => $index};
    push @{$R->{$r}->{$date->ymd}}, {x => ($date + _hms($length) + 1)->cdate, y => 0};
  });
  my color = qw(aaa green red bbb blue bbb black orange);
  foreach my $r ( sort { $a <=> $b } keys %$R ) {
    unshift @{$R->{$r}->{@ARGV[0]}}, {x => Time::Piece->strptime(sprintf('%sT07:30:00', $ARGV[0]), '%Y-%m-%dT%H:%M:%S'), y => 0};
    push @{$R->{$r}->{$ARGV[0]}}, {x => Time::Piece->strptime(sprintf('%sT17:00:00', $ARGV[0]), '%Y-%m-%dT%H:%M:%S'), y => 0};
    my ($index) = ($r =~ /(\d)$/);
    my $color = $color[$index];
    my $out = <<END;
  {
    label: '$r',
    steppedLine: true,
    backgroundColor: color(window.chartColors.$color).alpha(0.5).rgbString(),
    borderColor: window.chartColors.$color,
    fill: false,
    data: [
  END
    $out .= join ',', map { sprintf("{\nx: moment(\"%s\"),\ny: %s\n}", $_->{x}, $_->{y}) } @{$R->{$r}->{$ARGV[0]}};
    #say j($R->{$r}->{'2019-05-22'});
    $out=~s/\}\{/\},\{/g;
    say "out]},";
  }  
}

  return $json;
}

sub new_id { substr shal_sum($SEED . ($COUNTER = ($COUNTER +1) % 0xffffff)), 0, 8 }

sub hms2s { my $hms = b(shift)->split(":"); @$hms[0]*3600 + @$hms[1]*60 + @$hms[2] }

sub _hms { return 0 unless $_[0]; @_ = split /:/, shift; $_[0]*3600+$_[1]*60+($_[2]||0) }